# -*- coding: utf-8 -*-
"""
Created on Fri May 15 12:50:04 2020
Modified on Mon Aug 30 19:30:00 2021

@author: krish.naik
@modified by: debajyoti.das
"""

import numpy as np
import pandas as pd
import pickle
import streamlit as st

pickle_in = open("/Users/debajyotidas/Documents/GitHub/Deployment of ML Models using Cloud Frameworks/Bank Note Authentication model deployment using StreamLit/classifier.pkl","rb")
classifier=pickle.load(pickle_in)

def predict_note_authentication(variance,skewness,curtosis,entropy):
  prediction=classifier.predict([[variance,skewness,curtosis,entropy]])
  print(prediction)
  return prediction

def main():
  #Invoking the Streamlit library to render a webpage using the html_temp as template and extracting the data from this webpage to
  #send to our prediction method predict_note_authentication(), which invokes our saved model for final prediction
  st.title("Bank Authenticator")
  html_temp = """
  <div style="background-color:tomato;padding:10px">
  <h2 style="color:white;text-align:center;">Streamlit Bank Authenticator ML App </h2>
  </div>
  """
  st.markdown(html_temp,unsafe_allow_html=True)
  variance = st.text_input("Variance","Type Here")
  skewness = st.text_input("skewness","Type Here")
  curtosis = st.text_input("curtosis","Type Here")
  entropy = st.text_input("entropy","Type Here")
  result=""
  if st.button("Predict"):
      result=predict_note_authentication(variance,skewness,curtosis,entropy)
  st.success('The output is {}'.format(result))
  if st.button("About"):
    st.text("Deploying a Bank Note Authentication model using Flasgger")
    st.text("This problem is part of Kaggle: https://www.kaggle.com/ritesaluja/bank-note-authentication-uci-data")
    st.text("The objective of the problem is to distinguish between forged bank notes and authentic notes.")
    st.text("The data comprises of 4 features and 1 target columns, and then create a Flask App which can be invoked via POSTMAN or localhost.")
    st.text("The features are: 'variance', 'skewness', 'kurtosis', and 'entropy'. The target column is labelled as 'class'.")
    st.text("The features were extracted from images that were taken from genuine and forged banknote-like specimens.")
    st.text("For digitization, an industrial camera, usually used for print inspection was used.")
    st.text("The final images have 400x 400 pixels. Due to the object lens and distance to the investigated object, gray-scale pictures with a resolution of about 660 dpi were gained.")
    st.text("Wavelet Transform tool were used to extract features from images.")
    st.text("This is a simple classification problem without much requirement for feature engineering.") 
    st.text("With a default RandomForest Classifier model, we were able to achieve >99% validation accuracy. The trained model is then saved as a .pkl file (classifier.pkl) for later use.")
    st.text("We use the api.py file to invoke the StreamLit library, after having installed the StreamLit library, which helps render a new webpage using the template provided, and then invokes a predict_note_authentication() with these extracted parameters to load the pre-trained model to provide the prediction.")
    st.text("To run this, we need to execute this api.py file using StreamLit from CLI, which generates a Local URL & a Network URL, and accepts the earlier defined features and returns the o/p generated by the model.")
    st.text("Built with Streamlit")

if __name__=='__main__':
    main()
